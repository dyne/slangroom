// SPDX-FileCopyrightText: 2024 Dyne.org foundation
//
// SPDX-License-Identifier: AGPL-3.0-or-later

import { ExternalTokenizer } from '@lezer/lr';
import {
	eof,
	given,
	then,
	I,
	prepare,
	compute,
	open,
	connect,
	to,
	send,
	and,
	where,
	is,
	_with,
	output,
	secret,
	into,
	scenario,
	rule,
	version,
	unknown,
	ignore,
	when,
	foreach,
	endforeach,
	_if,
	endif,
	that,
	have,
	a,
	my,
	the,
	valid,
	named,
	_in,
	inside,
	am,
	name,
	known,
	as,
	verify,
	print,
	statement,
	execute,
	sql,
	parameters,
	parametrized,
	record,
	table,
	read,
	of,
	variable,
	save,
	database,
	address,
	ethereum,
	nonce,
	transaction_id,
	bytes,
	balance,
	addresses,
	suggested,
	gas,
	price,
	transaction,
	id,
	after,
	broadcast,
	sc,
	erc20,
	decimals,
	symbol,
	total,
	supply,
	erc721,
	owner,
	asset,
	path,
	download,
	extract,
	file,
	content,
	verbatim,
	store,
	list,
	directory,
	exists,
	does,
	not,
	exist,
	git,
	repository,
	clone,
	commit,
	create,
	_new,
	object,
	manipulate,
	get,
	value,
	set,
	sources,
	merge,
	paths,
	omit,
	array,
	values,
	concat,
	compact,
	properties,
	pick,
	_delete,
	_do,
	headers,
	sequential,
	parallel,
	same,
	post,
	put,
	patch,
	json_data,
	json_schema,
	validate,
	json,
	request,
	server_data,
	generate,
	access,
	token,
	authorization,
	code,
	client,
	expires_in,
	uri,
	details,
	from,
	request_uri,
	data,
	add,
	redirect_uri,
	start,
	pb,
	capacitor,
	my_credentials,
	login,
	refresh,
	email,
	ask,
	password,
	reset,
	list_parameters,
	some,
	records,
	show_parameters,
	one,
	create_parameters,
	record_parameters,
	update_parameters,
	update,
	delete_parameters,
	url,
	send_parameters,
	text,
	qr,
	dictionary,
	serialized,
	canonical,
	rdf,
	key,
	write,
	redis,
	command,
	shell,
	fetch,
	local,
	timestamp,
	milliseconds,
	seconds,
	jwk,
	holder,
	fields,
	vc,
	sd,
	jwt,
	verifier_url,
	issued_vc,
	disclosed,
	present,
	issuer,
	p256,
	sk,
	_public,
	pretty,
	script,
	keys,
	zencode,
	extra,
	conf,
} from './syntax.grammar.terms';

export const Eoftoken = new ExternalTokenizer(
	(input) => {
		if (input.next < 0) {
			input.acceptToken(eof);
		}
	},
	{ contextual: true, fallback: true },
);

const keywordMap = {
	given,
	then,
	I,
	prepare,
	compute,
	open,
	connect,
	to,
	send,
	and,
	where,
	is,
	with: _with,
	output,
	secret,
	into,
	scenario,
	rule,
	version,
	unknown,
	ignore,
	when,
	foreach,
	endforeach,
	if: _if,
	endif,
	that,
	have,
	a,
	my,
	the,
	valid,
	named,
	in: _in,
	inside,
	am,
	name,
	known,
	as,
	verify,
	print,
	statement,
	execute,
	sql,
	parameters,
	parametrized,
	record,
	table,
	read,
	of,
	variable,
	save,
	database,
	address,
	ethereum,
	nonce,
	transaction_id,
	bytes,
	balance,
	addresses,
	suggested,
	gas,
	price,
	transaction,
	id,
	after,
	broadcast,
	sc,
	erc20,
	decimals,
	symbol,
	total,
	supply,
	erc721,
	owner,
	asset,
	path,
	download,
	extract,
	file,
	content,
	verbatim,
	store,
	list,
	directory,
	exists,
	does,
	not,
	exist,
	git,
	repository,
	clone,
	commit,
	create,
	new: _new,
	object,
	manipulate,
	get,
	value,
	set,
	sources,
	merge,
	paths,
	omit,
	array,
	values,
	concat,
	compact,
	properties,
	pick,
	delete: _delete,
	do: _do,
	headers,
	sequential,
	parallel,
	same,
	post,
	put,
	patch,
	json_data,
	json_schema,
	validate,
	json,
	request,
	server_data,
	generate,
	access,
	token,
	authorization,
	code,
	client,
	expires_in,
	uri,
	details,
	from,
	request_uri,
	data,
	add,
	redirect_uri,
	start,
	pb,
	capacitor,
	my_credentials,
	login,
	refresh,
	email,
	ask,
	password,
	reset,
	list_parameters,
	some,
	records,
	show_parameters,
	one,
	create_parameters,
	record_parameters,
	update_parameters,
	update,
	delete_parameters,
	url,
	send_parameters,
	text,
	qr,
	dictionary,
	serialized,
	canonical,
	rdf,
	key,
	write,
	redis,
	command,
	shell,
	fetch,
	local,
	timestamp,
	milliseconds,
	seconds,
	jwk,
	holder,
	fields,
	vc,
	sd,
	jwt,
	verifier_url,
	issued_vc,
	disclosed,
	present,
	issuer,
	p256,
	sk,
	public: _public,
	pretty,
	script,
	keys,
	zencode,
	extra,
	conf,
};

export function keywords(name) {
	if (name == 'I') {
		return keywordMap[name];
	}

	let found = keywordMap[name.toLowerCase()];
	return found == null ? -1 : found;
}
